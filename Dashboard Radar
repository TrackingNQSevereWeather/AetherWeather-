import React, { useState, useEffect, useRef } from 'react';
import { MapContainer, TileLayer, Marker, Popup } from 'react-leaflet';
import 'leaflet/dist/leaflet.css';
import L from 'leaflet';
import {
  Loader2, Play, Pause, SkipBack, SkipForward, RefreshCw, Radio, Zap, Eye,
  Wind, Cloud, Settings, Info, Thermometer, Gauge, CloudRain } from
'lucide-react';
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Slider } from "@/components/ui/slider";
import { Badge } from "@/components/ui/badge";
import { Switch } from "@/components/ui/switch";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import { WeatherAPI } from '../components/weather/WeatherAPI';
import { motion } from "framer-motion";

// Fix for default marker icon issue with webpack
delete L.Icon.Default.prototype._getIconUrl;
L.Icon.Default.mergeOptions({
  iconRetinaUrl: 'https://unpkg.com/leaflet@1.7.1/dist/images/marker-icon-2x.png',
  iconUrl: 'https://unpkg.com/leaflet@1.7.1/dist/images/marker-icon.png',
  shadowUrl: 'https://unpkg.com/leaflet@1.7.1/dist/images/marker-shadow.png'
});

export default function Radar() {
  const [locationData, setLocationData] = useState(null);
  const [isLoading, setIsLoading] = useState(true);
  const [radarData, setRadarData] = useState([]);
  const [currentFrame, setCurrentFrame] = useState(0);
  const [isPlaying, setIsPlaying] = useState(false);
  const [opacity, setOpacity] = useState([0.7]);
  const [zoom, setZoom] = useState([7]);
  const [isLoadingRadar, setIsLoadingRadar] = useState(false);
  const [lastUpdate, setLastUpdate] = useState(null);
  const [showSettings, setShowSettings] = useState(true);
  const [mapStyle, setMapStyle] = useState('dark');
  const [showLegend, setShowLegend] = useState(true);
  const [playbackSpeed, setPlaybackSpeed] = useState([500]);
  const [view, setView] = useState('radar'); // New state for tab view
  const [windyLayer, setWindyLayer] = useState('wind'); // New state for Windy layer
  const mapRef = useRef(null);
  const intervalRef = useRef(null);

  useEffect(() => {
    const fetchLocation = async () => {
      setIsLoading(true);
      const setLocation = (lat, lon, name) => {
        setLocationData({ latitude: lat, longitude: lon, location: name });
        setIsLoading(false);
      };
      if (navigator.geolocation) {
        navigator.geolocation.getCurrentPosition(
          async (position) => {
            const { latitude, longitude } = position.coords;
            try {
              const name = await WeatherAPI.reverseGeocode(latitude, longitude);
              setLocation(latitude, longitude, name);
            } catch {
              setLocation(latitude, longitude, "Your Location");
            }
          },
          () => setLocation(-19.2590, 146.8169, "Townsville, QLD"),
          { enableHighAccuracy: true, timeout: 5000, maximumAge: 0 }
        );
      } else {
        setLocation(-19.2590, 146.8169, "Townsville, QLD");
      }
    };
    fetchLocation();
  }, []);

  useEffect(() => {
    if (locationData) fetchRadarData();
  }, [locationData]);

  useEffect(() => {
    if (mapRef.current && locationData) {
      mapRef.current.setView([locationData.latitude, locationData.longitude], zoom[0]);
    }
  }, [locationData, zoom]);

  useEffect(() => {
    if (isPlaying && radarData.length > 0) {
      intervalRef.current = setInterval(() => {
        setCurrentFrame((prev) => (prev + 1) % radarData.length);
      }, playbackSpeed[0]);
    } else if (intervalRef.current) {
      clearInterval(intervalRef.current);
    }
    return () => clearInterval(intervalRef.current);
  }, [isPlaying, radarData.length, playbackSpeed]);

  // More robust map resize handler
  useEffect(() => {
    const map = mapRef.current;
    if (!map) return;

    const timer = setTimeout(() => map.invalidateSize(), 200);

    const handleResize = () => map.invalidateSize();
    window.addEventListener('resize', handleResize);

    return () => {
      clearTimeout(timer);
      window.removeEventListener('resize', handleResize);
    };
  }, [showSettings]);

  const fetchRadarData = async () => {
    setIsLoadingRadar(true);
    try {
      const response = await fetch('https://api.rainviewer.com/public/weather-maps.json');
      const data = await response.json();
      const timestamps = data.radar.past.map((frame) => frame.time);
      setRadarData(timestamps);
      setCurrentFrame(timestamps.length - 1);
      setLastUpdate(new Date());
    } catch (error) {
      console.error("Failed to fetch radar data:", error);
    } finally {
      setIsLoadingRadar(false);
    }
  };

  const togglePlayback = () => setIsPlaying(!isPlaying);
  const goToFrame = (frameIndex) => setCurrentFrame(frameIndex);
  const formatTime = (timestamp) => new Date(timestamp * 1000).toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' });
  const getMapTileUrl = () => ({
    dark: "https://{s}.basemaps.cartocdn.com/dark_all/{z}/{x}/{y}{r}.png",
    satellite: "https://server.arcgisonline.com/ArcGIS/rest/services/World_Imagery/MapServer/tile/{z}/{y}/{x}",
    terrain: "https://{s}.tile.opentopomap.org/{z}/{x}/{y}.png",
    street: "https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png"
  })[mapStyle] || "https://{s}.basemaps.cartocdn.com/dark_all/{z}/{x}/{y}{r}.png";

  const getWindyEmbedUrl = () => {
    if (!locationData) return "";
    const baseUrl = "https://embed.windy.com/embed.html?";
    const params = new URLSearchParams({
      type: 'map',
      overlay: windyLayer,
      product: 'ecmwf',
      level: 'surface',
      units: 'metric',
      zoom: zoom[0],
      location: 'coords',
      lat: locationData.latitude,
      lon: locationData.longitude,
      metricWind: 'km/h',
      metricTemp: 'Â°C',
      metricRain: 'mm',
      metricPressure: 'hPa',
      message: 'true',
      calendar: 'false',
      radar: 'false',
      gribGrid: 'off',
      overlayContour: 'false',
      overlayDir: 'true'
    });
    return `${baseUrl}${params.toString()}`;
  };

  if (isLoading) {
    return (
      <div className="flex items-center justify-center h-screen bg-gradient-to-br from-slate-900 to-gray-900 px-4">
        <motion.div initial={{ opacity: 0, scale: 0.8 }} animate={{ opacity: 1, scale: 1 }} className="flex flex-col items-center space-y-6 text-center">
          <div className="relative">
            <Radio className="w-20 h-20 text-blue-400" />
            <div className="absolute inset-0 animate-ping"><Radio className="w-20 h-20 text-blue-400 opacity-75" /></div>
          </div>
          <div>
            <h2 className="text-2xl font-bold text-white mb-2">Initializing Weather Radar</h2>
            <p className="text-gray-300">Loading real-time precipitation data...</p>
          </div>
          <Loader2 className="w-8 h-8 animate-spin text-blue-400" />
        </motion.div>
      </div>);

  }

  const customLocationIcon = new L.divIcon({
    className: 'custom-location-marker',
    html: `<div class="w-4 h-4 bg-red-500 rounded-full border-2 border-white shadow-lg animate-pulse"></div>`,
    iconSize: [16, 16],
    iconAnchor: [8, 8]
  });

  return (
    <div className="h-full flex flex-col text-white">
      <style>{`
        .glass-card { background: rgba(30, 41, 59, 0.45); backdrop-filter: blur(12px); border: 1px solid rgba(255, 255, 255, 0.18); border-radius: 16px; }
        .radar-button { background: rgba(59, 130, 246, 0.2); border: 1px solid rgba(59, 130, 246, 0.3); transition: all 0.3s ease; }
        .radar-button:hover { background: rgba(59, 130, 246, 0.3); border-color: rgba(59, 130, 246, 0.5); box-shadow: 0 0 20px rgba(59, 130, 246, 0.3); }
        .radar-button.active { background: rgba(59, 130, 246, 0.8); border-color: rgb(59, 130, 246); }
        .leaflet-container { background: transparent !important; border-radius: 16px; height: 100% !important; width: 100% !important; }
        .leaflet-control-zoom { border-radius: 8px !important; border: none !important; box-shadow: 0 4px 20px rgba(0,0,0,0.3) !important; }
        .leaflet-control-zoom a { background: rgba(30, 41, 59, 0.9) !important; color: white !important; border: 1px solid rgba(255, 255, 255, 0.1) !important; }
      `}</style>

      {/* Header */}
      <header className="p-4 md:p-6 border-b border-white/10 shrink-0">
        <div className="max-w-7xl mx-auto flex flex-col sm:flex-row items-start sm:items-center justify-between gap-4">
          <div className="flex items-center space-x-4">
            <Radio className="w-10 h-10 text-blue-400" />
            <div>
              <h1 className="text-2xl font-bold">Weather Radar</h1>
              <p className="text-sm text-gray-300">Real-time precipitation tracking</p>
            </div>
          </div>
          <div className="flex items-center space-x-4">
            <Badge className="bg-green-600/80 text-white font-medium px-3 py-1"><Zap className="w-3 h-3 mr-1.5" />LIVE</Badge>
            {lastUpdate && <div className="text-xs text-gray-400 hidden sm:block">Updated: {lastUpdate.toLocaleTimeString()}</div>}
            <Button variant="ghost" size="icon" onClick={() => setShowSettings(!showSettings)} className="radar-button"><Settings className="w-5 h-5" /></Button>
          </div>
        </div>
      </header>

      {/* Main Layout */}
      <div className="flex flex-col lg:flex-row flex-1 lg:overflow-hidden">
        {/* Sidebar */}
        <aside className={`w-full lg:w-80 flex-col space-y-6 p-6 shrink-0 lg:overflow-y-auto ${showSettings ? 'flex' : 'hidden lg:flex'}`}>
          <Card className="glass-card"><CardHeader><CardTitle className="text-sm flex items-center"><Eye className="w-4 h-4 mr-2 text-blue-400" />Current Location</CardTitle></CardHeader><CardContent className="space-y-3"><div className="font-medium">{locationData?.location}</div><div className="grid grid-cols-2 gap-3 text-xs text-gray-300"><div><span className="text-gray-400">Lat:</span><div className="font-mono">{locationData?.latitude?.toFixed(4)}Â°</div></div><div><span className="text-gray-400">Lon:</span><div className="font-mono">{locationData?.longitude?.toFixed(4)}Â°</div></div></div></CardContent></Card>
          
          {view === 'radar' &&
          <>
              <Card className="glass-card"><CardHeader><CardTitle className="text-sm flex items-center"><Settings className="w-4 h-4 mr-2 text-blue-400" />Radar Controls</CardTitle></CardHeader><CardContent className="space-y-4"><div className="flex items-center justify-center space-x-2"><Button size="sm" onClick={() => goToFrame(Math.max(0, currentFrame - 1))} className="radar-button p-2" disabled={currentFrame === 0}><SkipBack className="w-4 h-4" /></Button><Button size="sm" onClick={togglePlayback} className={`radar-button p-3 ${isPlaying ? 'active' : ''}`}>{isPlaying ? <Pause className="w-5 h-5" /> : <Play className="w-5 h-5" />}</Button><Button size="sm" onClick={() => goToFrame(Math.min(radarData.length - 1, currentFrame + 1))} className="radar-button p-2" disabled={currentFrame === radarData.length - 1}><SkipForward className="w-4 h-4" /></Button></div><div className="space-y-2"><div className="flex items-center justify-between text-xs"><span className="text-gray-300">Radar Opacity</span><span className="font-mono">{Math.round(opacity[0] * 100)}%</span></div><Slider value={opacity} onValueChange={setOpacity} max={1} min={0.1} step={0.1} /></div><div className="space-y-2"><div className="flex items-center justify-between text-xs"><span className="text-gray-300">Map Zoom</span><span className="font-mono">{zoom[0]}x</span></div><Slider value={zoom} onValueChange={setZoom} max={12} min={3} step={1} /></div><div className="space-y-2"><div className="flex items-center justify-between text-xs"><span className="text-gray-300">Playback Speed</span><span className="font-mono">{(1000 / playbackSpeed[0]).toFixed(1)}x</span></div><Slider value={playbackSpeed} onValueChange={setPlaybackSpeed} max={1000} min={200} step={100} /></div><Button onClick={fetchRadarData} className="w-full radar-button" disabled={isLoadingRadar}>{isLoadingRadar ? <Loader2 className="w-4 h-4 animate-spin mr-2" /> : <RefreshCw className="w-4 h-4 mr-2" />}Refresh Data</Button></CardContent></Card>
              <Card className="glass-card"><CardHeader><CardTitle className="text-sm flex items-center">Display</CardTitle></CardHeader><CardContent className="space-y-4"><div className="space-y-2"><label className="text-xs text-gray-300">Map Style</label><Select value={mapStyle} onValueChange={setMapStyle}><SelectTrigger className="bg-gray-800/60 border-gray-700 text-white"><SelectValue /></SelectTrigger><SelectContent><SelectItem value="dark">Dark</SelectItem><SelectItem value="satellite">Satellite</SelectItem><SelectItem value="terrain">Terrain</SelectItem><SelectItem value="street">Street</SelectItem></SelectContent></Select></div><div className="flex items-center justify-between"><span className="text-xs text-gray-300">Show Legend</span><Switch checked={showLegend} onCheckedChange={setShowLegend} /></div></CardContent></Card>
              {showLegend && <Card className="glass-card"><CardHeader><CardTitle className="text-sm flex items-center"><Cloud className="w-4 h-4 mr-2 text-blue-400" />Precipitation Scale</CardTitle></CardHeader><CardContent><div className="space-y-3"><div className="h-4 rounded-lg border border-white/20" style={{ background: 'linear-gradient(to right, #0096ff, #0000ff, #00c800, #009600, #ffff00, #ffc800, #ff0000, #c80000, #ff00ff, #960096)' }} /><div className="flex justify-between text-xs text-gray-300"><span>Light</span><span>Heavy</span></div></div></CardContent></Card>}
            </>
          }

          {view === 'windy' &&
          <Card className="glass-card">
              <CardHeader>
                <CardTitle className="text-sm flex items-center"><Settings className="w-4 h-4 mr-2 text-blue-400" />Map Controls</CardTitle>
              </CardHeader>
              <CardContent className="space-y-4">
                <div className="space-y-2"><div className="flex items-center justify-between text-xs"><span className="text-gray-300">Map Zoom</span><span className="font-mono">{zoom[0]}x</span></div><Slider value={zoom} onValueChange={setZoom} max={12} min={3} step={1} /></div>
                <div>
                  <label className="text-xs text-gray-300 mb-2 block">Map Layers</label>
                  <div className="grid grid-cols-2 gap-2">
                    <Button onClick={() => setWindyLayer('wind')} size="sm" className={`justify-start ${windyLayer === 'wind' ? 'radar-button active' : 'radar-button'}`}><Wind className="w-4 h-4 mr-2" />Wind</Button>
                    <Button onClick={() => setWindyLayer('rain')} size="sm" className={`justify-start ${windyLayer === 'rain' ? 'radar-button active' : 'radar-button'}`}><CloudRain className="w-4 h-4 mr-2" />Rain</Button>
                    <Button onClick={() => setWindyLayer('temp')} size="sm" className={`justify-start ${windyLayer === 'temp' ? 'radar-button active' : 'radar-button'}`}><Thermometer className="w-4 h-4 mr-2" />Temp</Button>
                    <Button onClick={() => setWindyLayer('pressure')} size="sm" className={`justify-start ${windyLayer === 'pressure' ? 'radar-button active' : 'radar-button'}`}><Gauge className="w-4 h-4 mr-2" />Pressure</Button>
                  </div>
                </div>
              </CardContent>
            </Card>
          }

        </aside>

        {/* Main Content */}
        <main className="flex-1 flex flex-col p-6 min-h-0">
          <Tabs value={view} onValueChange={setView} className="flex flex-col flex-1">
            <TabsList className="mb-4 grid w-full grid-cols-2 glass-card p-1">
              <TabsTrigger value="radar">Live Radar</TabsTrigger>
              <TabsTrigger value="windy">Interactive Map</TabsTrigger>
            </TabsList>
            
            <TabsContent value="radar" className="flex-1 flex flex-col min-h-0">
              <div className="h-[60vh] lg:h-auto lg:flex-1 glass-card border-white/10 overflow-hidden">
                {locationData &&
                <MapContainer
                  ref={mapRef}
                  center={[locationData.latitude, locationData.longitude]}
                  zoom={zoom[0]}
                  style={{ height: '100%', width: '100%' }}
                  zoomControl={true}
                  attributionControl={false}>

                    <TileLayer url={getMapTileUrl()} />
                    {radarData.length > 0 && <TileLayer key={radarData[currentFrame]} url={`https://tilecache.rainviewer.com/v2/radar/${radarData[currentFrame]}/256/{z}/{x}/{y}/2/1_1.png`} opacity={opacity[0]} />}
                    <Marker position={[locationData.latitude, locationData.longitude]} icon={customLocationIcon}>
                      <Popup><div className="text-center font-semibold">{locationData.location}</div></Popup>
                    </Marker>
                  </MapContainer>
                }
              </div>
              <div className="mt-6 glass-card border-white/10 p-4 shrink-0">
                <div className="flex items-center justify-between mb-4"><h3 className="text-white font-medium flex items-center text-sm"><Wind className="w-4 h-4 mr-2 text-blue-400" />Radar Timeline</h3><div className="flex items-center space-x-2">{radarData.length > 0 && <Badge variant="outline" className="text-xs">Frame {currentFrame + 1}/{radarData.length}</Badge>}<div className="text-xs text-gray-400">{radarData.length > 0 ? formatTime(radarData[currentFrame]) : '--:--'}</div></div></div>
                <div className="grid grid-cols-4 sm:grid-cols-8 lg:grid-cols-12 gap-1">
                  {radarData.length > 0 ? radarData.slice(-12).map((timestamp, index) => <Button key={timestamp} onClick={() => goToFrame(index + (radarData.length - 12))} size="sm" className={`h-16 text-xs border transition-all duration-200 ${index + (radarData.length - 12) === currentFrame ? 'bg-blue-600 border-blue-400 text-white' : 'radar-button text-gray-300'}`}><div className="text-center"><div className="font-mono text-xs">{formatTime(timestamp)}</div><div className="text-[10px] opacity-60 mt-1 hidden sm:block">-{(radarData.length - (index + (radarData.length - 12))) * 5}m</div></div></Button>) : Array(12).fill(0).map((_, i) => <div key={i} className="h-16 glass-card border-white/10 animate-pulse" />)}
                </div>
                <div className="flex items-center justify-center mt-4 text-xs text-gray-400"><Info className="w-3 h-3 mr-1.5" />Data updates every 5 minutes â¢ Powered by RainViewer</div>
              </div>
            </TabsContent>

          <TabsContent
  value="windy"
  className="mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-8 focus-visible:ring-ring focus-visible:ring-offset-2 flex-1 flex flex-col min-h-0"
>
  <div className="min-h-[400px] glass-card border-white/10 overflow-hidden">
    {locationData && (
      <iframe
        key={windyLayer + zoom[0]}
        width="400%"
        height="400%"
        src={getWindyEmbedUrl()}
        frameBorder="0"
        title="Interactive Weather Map by Windy.com"
        style={{ minHeight: "400px", display: "block" }}
      ></iframe>
    )}
  </div>

  <div className="mt-6 glass-card border-white/10 p-4 shrink-0 text-center">
    <p className="text-xs text-gray-400 flex items-center justify-center">
      <Info className="w-3 h-3 mr-1.5" />
      Interactive map powered by Windy.com.
    </p>
  </div>
</TabsContent>

          </Tabs>
        </main>
      </div>
    </div>);
