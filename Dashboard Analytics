import React, { useState, useEffect, useCallback } from 'react';
import { motion } from 'framer-motion';
import { InvokeLLM } from '@/integrations/Core';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import { LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer, BarChart, Bar, AreaChart, Area, PieChart, Pie, Cell } from 'recharts';
import {
  TrendingUp,
  TrendingDown,
  Thermometer,
  Droplets,
  Wind,
  Activity,
  Zap,
  Sun,
  Loader2,
  RefreshCw,
  Download,
  FileText
} from 'lucide-react';
import { useTheme } from '../components/theme/ThemeProvider';
import SeasonalOutlook from '../components/weather/SeasonalOutlook';

export default function AnalyticsPage() {
  const { theme, temperatureUnit } = useTheme();
  const [isAnalyticsLoading, setIsAnalyticsLoading] = useState(true);
  const [timeRange, setTimeRange] = useState('30d');
  const [insights, setInsights] = useState(null);
  const [isInsightsLoading, setIsInsightsLoading] = useState(false);
  const [location, setLocation] = useState('Queensland, Australia');

  const [temperatureChartData, setTemperatureChartData] = useState([]);
  const [precipitationChartData, setPrecipitationChartData] = useState([]);
  const [humidityChartData, setHumidityChartData] = useState([]);
  const [windChartData, setWindChartData] = useState([]);
  const [stats, setStats] = useState(null);

  const COLORS = ['#0088FE', '#00C49F', '#FFBB28', '#FF8042', '#A28DFF'];

  const locations = [
    'Queensland, Australia',
    'New South Wales, Australia',
    'Victoria, Australia',
    'Western Australia, Australia',
    'South Australia, Australia',
    'Tasmania, Australia',
    'Northern Territory, Australia',
    'Australian Capital Territory, Australia',
    'Australia' // For the whole country
  ];

  const convertTemp = (celsius, round = true) => {
    if (celsius === null || celsius === undefined) return 'N/A';
    let temp = celsius;
    if (temperatureUnit === 'fahrenheit') {
      temp = celsius * 9 / 5 + 32;
    }
    return round ? Math.round(temp) : temp;
  };

  const timeRangeToDays = (range) => {
    if (range === '7d') return 7;
    if (range === '14d') return 14;
    if (range === '30d') return 30;
    if (range === 'last_month') return 30;
    return 30; // Default
  };

  const loadStateAnalytics = useCallback(async () => {
    setIsAnalyticsLoading(true);
    setInsights(null);

    const days = timeRangeToDays(timeRange);

    try {
      const response = await InvokeLLM({
        prompt: `Generate a comprehensive weather analytics summary for the state/region of ${location} for the last ${days} days. Provide aggregated or representative data for the entire region, ensuring values are in metric units (Celsius, km/h, mm). The response must be a JSON object with the following structure:`,
        add_context_from_internet: true,
        response_json_schema: {
          type: "object",
          properties: {
            stats: {
              type: "object",
              properties: {
                avgTemp: { type: "number", description: "Average temperature in Celsius" },
                maxTemp: { type: "number", description: "Highest temperature recorded in Celsius" },
                minTemp: { type: "number", description: "Lowest temperature recorded in Celsius" },
                avgHumidity: { type: "number" },
                avgWind: { type: "number", description: "Average wind speed in km/h" },
                totalRainfall: { type: "number", description: "Total rainfall in mm" }
              },
              required: ["avgTemp", "maxTemp", "minTemp", "avgHumidity", "avgWind", "totalRainfall"]
            },
            temperatureChartData: {
              type: "array",
              items: {
                type: "object",
                properties: {
                  date: { type: "string", description: "Date in 'Mon DD' format, e.g., 'Jul 24'" },
                  high: { type: "number", description: "High temp in Celsius" },
                  low: { type: "number", description: "Low temp in Celsius" },
                  avg: { type: "number", description: "Average temp in Celsius" }
                },
                required: ["date", "high", "low", "avg"]
              }
            },
            precipitationChartData: {
              type: "array",
              items: {
                type: "object",
                properties: {
                  date: { type: "string", description: "Date in 'Mon DD' format, e.g., 'Jul 24'" },
                  rainfall: { type: "number", description: "Rainfall in mm" }
                },
                required: ["date", "rainfall"]
              }
            },
            humidityChartData: {
              type: "array",
              items: {
                type: "object",
                properties: {
                  time: { type: "string", description: "Time label, e.g., a date or time of day" },
                  humidity: { type: "number" }
                },
                required: ["time", "humidity"]
              }
            },
            windChartData: {
              type: "array",
              items: {
                type: "object",
                properties: {
                  name: { type: "string", description: "e.g., 'Low (0-10 km/h)'" },
                  value: { type: "number", description: "Percentage of time in this category" }
                },
                required: ["name", "value"]
              }
            }
          },
          required: ["stats", "temperatureChartData", "precipitationChartData", "humidityChartData", "windChartData"]
        }
      });
      
      if (response) {
        setStats(response.stats);
        // Process chart data to convert temperatures if needed
        setTemperatureChartData(response.temperatureChartData.map(d => ({
          ...d,
          high: convertTemp(d.high),
          low: convertTemp(d.low),
          avg: convertTemp(d.avg)
        })));
        setPrecipitationChartData(response.precipitationChartData);
        setHumidityChartData(response.humidityChartData);
        setWindChartData(response.windChartData);
      }

    } catch (error) {
      console.error('Error loading state analytics:', error);
      setStats(null);
      setTemperatureChartData([]);
      setPrecipitationChartData([]);
      setHumidityChartData([]);
      setWindChartData([]);
    } finally {
      setIsAnalyticsLoading(false);
    }
  }, [location, timeRange, temperatureUnit]);


  useEffect(() => {
    loadStateAnalytics();
  }, [loadStateAnalytics]);

  const generateInsights = async () => {
    setIsInsightsLoading(true);
    try {
      const response = await InvokeLLM({
        prompt: `Based on general climate data for the region of ${location}, provide practical weather insights for the current season.
        
        Provide insights about:
        1. Temperature patterns and trends expected for this time of year.
        2. Typical comfort levels and what to expect.
        3. Seasonal outlook for this region.
        4. Any notable weather patterns (e.g., wet season, dry season, bushfire risk).
        5. Practical recommendations for residents.
        
        Keep it conversational and useful for everyday planning.`,
        add_context_from_internet: true,
        response_json_schema: {
          type: 'object',
          properties: {
            temperature_insights: { type: 'string' },
            comfort_analysis: { type: 'string' },
            seasonal_outlook: { type: 'string' },
            weather_patterns: { type: 'string' },
            recommendations: { type: 'array', items: { type: 'string' } }
          }
        }
      });

      if (response) {
        setInsights(response);
      }
    } catch (error) {
      console.error('Error generating insights:', error);
      setInsights({
        temperature_insights: "Failed to generate insights.",
        comfort_analysis: "Failed to generate insights.",
        seasonal_outlook: "Failed to generate insights.",
        weather_patterns: "Failed to generate insights.",
        recommendations: ["Please try again later or check your network connection."]
      });
    } finally {
      setIsInsightsLoading(false);
    }
  };

  const getTimeRangeLabel = () => {
    if (timeRange === '7d') return "Last 7 Days";
    if (timeRange === '14d') return "Last 14 Days";
    if (timeRange === '30d') return "Last 30 Days";
    if (timeRange === 'last_month') return "Last 30 Days";
    return "Analysis";
  };
  
  const refreshData = () => {
    loadStateAnalytics();
  };

  return (
    <div className="min-h-screen p-6">
      <div className="max-w-7xl mx-auto">
        {/* Header */}
        <motion.div
          initial={{ opacity: 0, y: -20 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ duration: 0.6 }}
          className="mb-8"
        >
          <div className="flex flex-col md:flex-row md:items-center md:justify-between">
            <div>
              <h1 className="text-4xl font-bold text-gray-900 dark:text-white mb-2">
                Regional Analytics
              </h1>
              <p className="text-gray-600 dark:text-gray-300">
                Climate trends and insights for {location}
              </p>
            </div>
            <div className="flex items-center space-x-3 mt-4 md:mt-0">
              <Select value={location} onValueChange={setLocation}>
                <SelectTrigger className="bg-slate-950 text-slate-50 px-3 py-2 text-sm flex h-10 items-center justify-between rounded-md border border-input ring-offset-background placeholder:text-muted-foreground focus:outline-none focus:ring-1 focus:ring-ring disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1 w-48 glass-effect-light dark:glass-effect-dark">
                  <SelectValue />
                </SelectTrigger>
                <SelectContent>
                  {locations.map((loc) => (
                    <SelectItem key={loc} value={loc}>{loc}</SelectItem>
                  ))}
                </SelectContent>
              </Select>
              <Select value={timeRange} onValueChange={setTimeRange}>
                <SelectTrigger className="bg-slate-950 px-3 py-2 text-sm flex h-10 items-center justify-between rounded-md border border-input ring-offset-background placeholder:text-muted-foreground focus:outline-none focus:ring-1 focus:ring-ring disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1 w-36 glass-effect-light dark:glass-effect-dark">
                  <SelectValue />
                </SelectTrigger>
                <SelectContent>
                  <SelectItem value="7d">Last 7 days</SelectItem>
                  <SelectItem value="14d">Last 2 weeks</SelectItem>
                  <SelectItem value="30d">Last 30 days</SelectItem>
                </SelectContent>
              </Select>
              <Button
                onClick={generateInsights}
                className="bg-blue-600 hover:bg-blue-700"
                disabled={isInsightsLoading}
              >
                {isInsightsLoading ?
                  <Loader2 className="w-4 h-4 animate-spin mr-2" /> :
                  <Zap className="w-4 h-4 mr-2" />
                }
                AI Insights
              </Button>
            </div>
          </div>
        </motion.div>

        {/* Quick Stats Cards */}
        {stats && !isAnalyticsLoading &&
          <div className="grid grid-cols-2 md:grid-cols-5 gap-4 mb-8">
            <StatCard
              title="Avg Temp"
              value={`${convertTemp(stats.avgTemp)}°`}
              icon={Thermometer}
              color="text-red-500"
            />
            <StatCard
              title="Max Temp"
              value={`${convertTemp(stats.maxTemp)}°`}
              icon={TrendingUp}
              color="text-orange-500"
            />
            <StatCard
              title="Min Temp"
              value={`${convertTemp(stats.minTemp)}°`}
              icon={TrendingDown}
              color="text-blue-500"
            />
            <StatCard
              title="Avg Humidity"
              value={`${Math.round(stats.avgHumidity)}%`}
              icon={Droplets}
              color="text-cyan-500"
            />
            <StatCard
              title="Avg Wind"
              value={`${Math.round(stats.avgWind)} km/h`}
              icon={Wind}
              color="text-purple-500"
            />
          </div>
        }
        
        {isAnalyticsLoading && (
            <div className="grid grid-cols-2 md:grid-cols-5 gap-4 mb-8">
                {Array(5).fill(0).map((_, i) => <div key={i} className="h-28 glass-effect-dark border-white/20 rounded-lg animate-pulse"></div>)}
            </div>
        )}


        <div className="grid grid-cols-1 lg:grid-cols-3 gap-8">
          {/* Charts Display Area */}
          <div className="lg:col-span-2">
            <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                {/* Temperature Trend Chart */}
                <Card className={`${theme === 'dark' ? 'glass-effect-dark' : 'glass-effect-light'} border-white/20`}>
                    <CardHeader><CardTitle className="text-gray-900 dark:text-white">Temperature Trends</CardTitle></CardHeader>
                    <CardContent>
                    <div className="h-64">
                        {isAnalyticsLoading ? <div className="flex items-center justify-center h-full"><Loader2 className="w-8 h-8 animate-spin text-gray-500" /></div> :
                        <ResponsiveContainer width="100%" height="100%">
                            <LineChart data={temperatureChartData}>
                            <CartesianGrid strokeDasharray="3 3" stroke={theme === 'dark' ? '#374151' : '#e5e7eb'} />
                            <XAxis dataKey="date" stroke={theme === 'dark' ? '#9ca3af' : '#6b7280'} fontSize={12} />
                            <YAxis stroke={theme === 'dark' ? '#9ca3af' : '#6b7280'} fontSize={12} />
                            <Tooltip contentStyle={{ backgroundColor: theme === 'dark' ? '#1f2937' : '#ffffff', border: '1px solid ' + (theme === 'dark' ? '#374151' : '#e5e7eb'), borderRadius: '8px', color: theme === 'dark' ? '#ffffff' : '#000000' }} />
                            <Legend />
                            <Line type="monotone" dataKey="high" stroke="#ef4444" strokeWidth={2} name={`High (°${temperatureUnit.charAt(0).toUpperCase()})`} />
                            <Line type="monotone" dataKey="low" stroke="#3b82f6" strokeWidth={2} name={`Low (°${temperatureUnit.charAt(0).toUpperCase()})`} />
                            <Line type="monotone" dataKey="avg" stroke="#10b981" strokeWidth={2} name={`Average (°${temperatureUnit.charAt(0).toUpperCase()})`} />
                            </LineChart>
                        </ResponsiveContainer>}
                    </div>
                    </CardContent>
                </Card>

                {/* Precipitation Chart */}
                <Card className={`${theme === 'dark' ? 'glass-effect-dark' : 'glass-effect-light'} border-white/20`}>
                    <CardHeader><CardTitle className="text-gray-900 dark:text-white">Precipitation Patterns</CardTitle></CardHeader>
                    <CardContent>
                    <div className="h-64">
                        {isAnalyticsLoading ? <div className="flex items-center justify-center h-full"><Loader2 className="w-8 h-8 animate-spin text-gray-500" /></div> :
                        <ResponsiveContainer width="100%" height="100%">
                            <BarChart data={precipitationChartData}>
                            <CartesianGrid strokeDasharray="3 3" stroke={theme === 'dark' ? '#374151' : '#e5e7eb'} />
                            <XAxis dataKey="date" stroke={theme === 'dark' ? '#9ca3af' : '#6b7280'} fontSize={12} />
                            <YAxis stroke={theme === 'dark' ? '#9ca3af' : '#6b7280'} fontSize={12} />
                            <Tooltip contentStyle={{ backgroundColor: theme === 'dark' ? '#1f2937' : '#ffffff', border: '1px solid ' + (theme === 'dark' ? '#374151' : '#e5e7eb'), borderRadius: '8px', color: theme === 'dark' ? '#ffffff' : '#000000' }} formatter={(value) => [`${parseFloat(value).toFixed(2)}mm`, 'Rainfall']} />
                            <Bar dataKey="rainfall" fill="#3b82f6" />
                            </BarChart>
                        </ResponsiveContainer>}
                    </div>
                    </CardContent>
                </Card>
            </div>
          </div>

          {/* AI Insights */}
          <div>
            <Card className={`${theme === 'dark' ? 'glass-effect-dark' : 'glass-effect-light'} border-white/20`}>
              <CardHeader>
                <CardTitle className="text-gray-900 dark:text-white flex items-center space-x-2">
                  <Zap className="w-5 h-5 text-yellow-500" />
                  <span>AI Insights</span>
                </CardTitle>
              </CardHeader>
              <CardContent>
                {isInsightsLoading ?
                  <div className="flex items-center justify-center py-8">
                    <Loader2 className="w-6 h-6 animate-spin text-blue-500" />
                  </div> :
                  insights ?
                    <div className="space-y-4">
                      <div>
                        <h4 className="font-semibold text-gray-900 dark:text-white mb-2">Temperature Insights</h4>
                        <p className="text-sm text-gray-600 dark:text-gray-300">{insights.temperature_insights}</p>
                      </div>
                      <div>
                        <h4 className="font-semibold text-gray-900 dark:text-white mb-2">Comfort Analysis</h4>
                        <p className="text-sm text-gray-600 dark:text-gray-300">{insights.comfort_analysis}</p>
                      </div>
                      {insights.recommendations && insights.recommendations.length > 0 &&
                        <div>
                          <h4 className="font-semibold text-gray-900 dark:text-white mb-2">Recommendations</h4>
                          <ul className="space-y-1">
                            {insights.recommendations.slice(0, 3).map((rec, i) =>
                              <li key={i} className="text-sm text-gray-600 dark:text-gray-300 flex items-start">
                                <span className="w-1.5 h-1.5 bg-blue-500 rounded-full mt-2 mr-2 flex-shrink-0"></span>
                                {rec}
                              </li>
                            )}
                          </ul>
                        </div>
                      }
                    </div> :
                    <div className="text-center py-8">
                      <p className="text-gray-500 dark:text-gray-400 mb-4">Click "AI Insights" to get personalized weather analysis</p>
                      <Button onClick={generateInsights} variant="outline" size="sm">
                        <Zap className="w-4 h-4 mr-2" />
                        Generate Insights
                      </Button>
                    </div>
                }
              </CardContent>
            </Card>
          </div>
        </div>

        {/* New Charts Grid */}
        <div className="grid grid-cols-1 lg:grid-cols-2 gap-6 mb-8 mt-8">
          {/* Humidity Levels */}
          <Card className={`${theme === 'dark' ? 'glass-effect-dark' : 'glass-effect-light'} border-white/20`}>
            <CardHeader>
              <CardTitle className="text-gray-900 dark:text-white">Humidity Levels</CardTitle>
            </CardHeader>
            <CardContent>
              <div className="h-64">
                {isAnalyticsLoading ? <div className="flex items-center justify-center h-full"><Loader2 className="w-8 h-8 animate-spin text-gray-500" /></div> :
                  <ResponsiveContainer width="100%" height="100%">
                    <AreaChart data={humidityChartData}>
                      <CartesianGrid strokeDasharray="3 3" stroke={theme === 'dark' ? '#374151' : '#e5e7eb'} />
                      <XAxis dataKey="time" stroke={theme === 'dark' ? '#9ca3af' : '#6b7280'} fontSize={12} />
                      <YAxis stroke={theme === 'dark' ? '#9ca3af' : '#6b7280'} fontSize={12} />
                      <Tooltip contentStyle={{ backgroundColor: theme === 'dark' ? '#1f2937' : '#ffffff', border: '1px solid ' + (theme === 'dark' ? '#374151' : '#e5e7eb'), borderRadius: '8px', color: theme === 'dark' ? '#ffffff' : '#000000' }} />
                      <Area type="monotone" dataKey="humidity" stroke="#8b5cf6" fill="#8b5cf6" fillOpacity={0.3} />
                    </AreaChart>
                  </ResponsiveContainer>}
              </div>
            </CardContent>
          </Card>

          {/* Wind Speed Distribution */}
          <Card className={`${theme === 'dark' ? 'glass-effect-dark' : 'glass-effect-light'} border-white/20`}>
            <CardHeader>
              <CardTitle className="text-gray-900 dark:text-white">Wind Speed Distribution</CardTitle>
            </CardHeader>
            <CardContent>
              <div className="h-64">
                {isAnalyticsLoading ? <div className="flex items-center justify-center h-full"><Loader2 className="w-8 h-8 animate-spin text-gray-500" /></div> :
                  <ResponsiveContainer width="100%" height="100%">
                    <PieChart>
                      <Pie
                        data={windChartData}
                        cx="50%"
                        cy="50%"
                        outerRadius={80}
                        dataKey="value"
                        labelLine={false}
                        label={({ name, percent }) => `${name} ${(percent * 100).toFixed(0)}%`}
                      >
                        {windChartData.map((entry, index) => (
                          <Cell key={`cell-${index}`} fill={COLORS[index % COLORS.length]} />
                        ))}
                      </Pie>
                      <Tooltip contentStyle={{ backgroundColor: theme === 'dark' ? '#1f2937' : '#ffffff', border: '1px solid ' + (theme === 'dark' ? '#374151' : '#e5e7eb'), borderRadius: '8px', color: theme === 'dark' ? '#ffffff' : '#000000' }} />
                      <Legend verticalAlign="bottom" align="center" layout="horizontal" />
                    </PieChart>
                  </ResponsiveContainer>}
              </div>
            </CardContent>
          </Card>
        </div>
        
        {/* New Seasonal Outlook Section */}
        <SeasonalOutlook location={location} />

        {/* Export and Actions */}
        <Card className={`${theme === 'dark' ? 'glass-effect-dark' : 'glass-effect-light'} border-white/20 mt-8`}>
          <CardHeader>
            <CardTitle className="text-gray-900 dark:text-white">Analysis Tools</CardTitle>
          </CardHeader>
          <CardContent className="space-y-4">
            <div className="flex flex-wrap gap-4">
              <Button
                onClick={refreshData}
                disabled={isAnalyticsLoading}
                className="bg-purple-600 hover:bg-purple-700 text-white border-0"
              >
                {isAnalyticsLoading ? <Loader2 className="w-4 h-4 mr-2 animate-spin" /> : <RefreshCw className="w-4 h-4 mr-2" />}
                Refresh Analytics
              </Button>
            </div>
            
            {stats &&
            <div className="grid grid-cols-1 md:grid-cols-3 gap-4 mt-6">
                <div className="bg-gray-800/30 p-4 rounded-lg">
                  <div className="text-2xl font-bold text-white">{Math.round(stats.maxTemp)}°{temperatureUnit.charAt(0).toUpperCase()}</div>
                  <div className="text-sm text-gray-400">Max Temperature ({getTimeRangeLabel()})</div>
                </div>
                <div className="bg-gray-800/30 p-4 rounded-lg">
                  <div className="text-2xl font-bold text-white">{Math.round(stats.avgTemp)}°{temperatureUnit.charAt(0).toUpperCase()}</div>
                  <div className="text-sm text-gray-400">Average Temperature</div>
                </div>
                <div className="bg-gray-800/30 p-4 rounded-lg">
                  <div className="text-2xl font-bold text-white">{Math.round(stats.totalRainfall)}mm</div>
                  <div className="text-sm text-gray-400">
                    Total Rainfall ({getTimeRangeLabel()})
                  </div>
                </div>
              </div>
            }
          </CardContent>
        </Card>
      </div>
    </div>
  );
}

function StatCard({ title, value, icon: Icon, color }) {
  const { theme } = useTheme();

  return (
    <motion.div
      initial={{ opacity: 0, y: 20 }}
      animate={{ opacity: 1, y: 0 }}
      transition={{ duration: 0.5 }}
    >
      <Card className={`${theme === 'dark' ? 'glass-effect-dark' : 'glass-effect-light'} border-white/20`}>
        <CardContent className="p-4 text-center">
          <Icon className={`w-6 h-6 mx-auto mb-2 ${color}`} />
          <div className="text-slate-50 font-bold dark:text-white">{value}</div>
          <div className="text-xs text-gray-600 dark:text-gray-400">{title}</div>
        </CardContent>
      </Card>
    </motion.div>
  );
}
