
import React, { useState, useEffect, useCallback } from "react";
import { motion } from "framer-motion";
import { FavoriteLocation } from "@/entities/FavoriteLocation";
import {
  Thermometer,
  Droplets,
  Wind,
  Eye,
  Gauge,
  Sun,
  CloudRain,
  Cloud,
  Snowflake,
  Zap as Thunderstorm,
  Star } from
"lucide-react";
import { Card, CardContent } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { useTheme } from "../theme/ThemeProvider";

const weatherIcons = {
  sunny: Sun,
  cloudy: Cloud,
  rainy: CloudRain,
  snowy: Snowflake,
  thunderstorm: Thunderstorm,
  clear: Sun
};

const weatherGradients = {
  sunny: "sunny-gradient",
  cloudy: "cloudy-gradient",
  rainy: "rainy-gradient",
  snowy: "snowy-gradient",
  thunderstorm: "rainy-gradient",
  clear: "sunny-gradient"
};

export default function CurrentWeather({ weatherData, isLoading }) {
  const { theme, temperatureUnit } = useTheme();
  const [isFavorite, setIsFavorite] = useState(false);
  const [favoriteId, setFavoriteId] = useState(null);

  const checkForFavorite = useCallback(async () => {
    if (!weatherData?.latitude || !weatherData?.longitude) {
      setIsFavorite(false);
      setFavoriteId(null);
      return;
    }

    // Check if a favorite with these coordinates already exists for the user
    const existing = await FavoriteLocation.filter({
      latitude: weatherData.latitude,
      longitude: weatherData.longitude
    });

    if (existing.length > 0) {
      setIsFavorite(true);
      setFavoriteId(existing[0].id);
    } else {
      setIsFavorite(false);
      setFavoriteId(null);
    }
  }, [weatherData]);

  useEffect(() => {
    checkForFavorite();
  }, [checkForFavorite]);

  const handleToggleFavorite = async () => {
    if (isFavorite && favoriteId) {
      await FavoriteLocation.delete(favoriteId);
      setIsFavorite(false);
      setFavoriteId(null);
    } else if (weatherData) {
      const newFavorite = await FavoriteLocation.create({
        location_name: weatherData.location,
        latitude: weatherData.latitude,
        longitude: weatherData.longitude,
        notes: ""
      });
      setIsFavorite(true);
      setFavoriteId(newFavorite.id);
    }
  };

  const convertTemp = (celsius) => {
    if (temperatureUnit === 'fahrenheit') {
      return Math.round(celsius * 9 / 5 + 32);
    }
    return Math.round(celsius);
  };

  if (isLoading) {
    return (
      <div className="space-y-6">
        <div className="h-64 bg-white/30 dark:bg-black/20 rounded-3xl animate-pulse" />
        <div className="grid grid-cols-2 md:grid-cols-4 gap-4">
          {Array(4).fill(0).map((_, i) =>
          <div key={i} className="h-24 bg-white/30 dark:bg-black/20 rounded-2xl animate-pulse" />
          )}
        </div>
      </div>);

  }

  if (!weatherData) {
    return (
      <div className="text-center py-12">
        <Cloud className="w-16 h-16 mx-auto mb-4 text-gray-500 dark:text-gray-400" />
        <p className="text-gray-400">No weather data available</p>
      </div>);

  }

  let IconComponent;
  if (weatherData.weather_icon && weatherData.weather_icon.startsWith('//')) {
    IconComponent = <img src={`https:${weatherData.weather_icon}`} alt={weatherData.description} className="w-16 h-16" />;
  } else {
    const LucideIcon = weatherIcons[weatherData.condition?.toLowerCase()] || Cloud;
    IconComponent = <LucideIcon className="w-16 h-16 text-white/90" />;
  }
  const gradientClass = weatherGradients[weatherData.condition?.toLowerCase()] || "weather-gradient";

  return (
    <div className="space-y-6">
      {/* Hero Weather Card */}
      <motion.div
        initial={{ opacity: 0, y: 20 }}
        animate={{ opacity: 1, y: 0 }}
        transition={{ duration: 0.6 }}
        className={`${gradientClass} rounded-3xl p-8 text-white relative overflow-hidden`}>

        <div className="absolute top-0 right-0 w-32 h-32 bg-white/10 rounded-full -translate-y-16 translate-x-16" />
        <div className="absolute bottom-0 left-0 w-24 h-24 bg-white/5 rounded-full translate-y-12 -translate-x-12" />
        
        <div className="relative z-10">
          <div className="flex items-start justify-between mb-6">
            <div className="flex-1">
              <div className="flex items-center space-x-3">
                <h2 className="text-3xl font-bold mb-2 text-white">{weatherData.location}</h2>
                <Button
                  variant="ghost"
                  size="icon"
                  onClick={handleToggleFavorite}
                  className="text-white hover:bg-white/20">

                  <Star className={`w-6 h-6 transition-all duration-300 ${isFavorite ? 'fill-yellow-400 text-yellow-400' : 'text-white/70'}`} />
                </Button>
              </div>
              <p className="text-white/90 text-lg capitalize">{weatherData.description}</p>
            </div>
            {IconComponent}
          </div>
          
          <div className="flex items-end space-x-4">
            <div className="text-6xl font-light text-white">{convertTemp(weatherData.current_temp)}°</div>
            <div className="text-xl text-white/90 pb-2">
              Feels like {convertTemp(weatherData.feels_like)}°
            </div>
          </div>
        </div>
      </motion.div>

      {/* Weather Details Grid */}
      <div className="grid grid-cols-2 md:grid-cols-4 gap-4">
        <WeatherMetric
          icon={Droplets}
          label="Humidity"
          value={`${weatherData.humidity}%`}
          delay={0.1} />

        <WeatherMetric
          icon={Wind}
          label="Wind Speed"
          value={`${weatherData.wind_speed} km/h`}
          delay={0.2} />

        <WeatherMetric
          icon={Eye}
          label="Visibility"
          value={`${weatherData.visibility} km`}
          delay={0.3} />

        <WeatherMetric
          icon={Gauge}
          label="Pressure"
          value={`${weatherData.pressure} hPa`}
          delay={0.4} />

      </div>
    </div>);

}

function WeatherMetric({ icon: Icon, label, value, delay }) {
  const { theme } = useTheme();

  return (
    <motion.div
      initial={{ opacity: 0, y: 20 }}
      animate={{ opacity: 1, y: 0 }}
      transition={{ duration: 0.5, delay }}>

      <Card className={`${theme === 'dark' ? 'glass-effect-dark' : 'glass-effect-light'} border-white/20 hover:bg-white/40 dark:hover:bg-black/30 transition-all duration-300`}>
        <CardContent className="p-6">
          <div className="flex items-center space-x-3 mb-3">
            <Icon className="w-5 h-5 text-white" />
            <span className="text-sm font-medium text-white/80">{label}</span>
          </div>
          <div className="text-white font-bold">{value}</div>
        </CardContent>
      </Card>
    </motion.div>);
