
import React, { useState, useEffect } from 'react';
import { motion } from 'framer-motion';
import { Sailboat, Waves, Wind, Sun, Moon, Search, Loader2, MapPin } from 'lucide-react';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Input } from '@/components/ui/input';
import { Button } from '@/components/ui/button';
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import { InvokeLLM } from '@/integrations/Core';

// Reusable component for displaying marine data
const InfoCard = ({ title, value, unit, icon: Icon }) =>
<div className="glass-effect-dark p-4 rounded-lg text-center">
    <Icon className="w-8 h-8 mx-auto mb-2 text-blue-400" />
    <p className="text-sm text-white/70">{title}</p>
    <p className="text-slate-50 text-xl font-bold">{value} <span className="text-sm font-normal">{unit}</span></p>
  </div>;


// Reusable component for tide information
const TideInfo = ({ time, height, type }) =>
<div className="flex items-center justify-between p-3 bg-gray-800/30 rounded-lg">
    <div className="flex items-center space-x-2">
      {type === 'High' ? <Sun className="w-5 h-5 text-yellow-400" /> : <Moon className="w-5 h-5 text-gray-400" />}
      <p className="text-slate-50">{type} Tide</p>
    </div>
    <div className="text-right">
      <p className="text-slate-300 font-semibold">{time}</p>
      <p className="text-slate-300 text-sm">{height} m</p>
    </div>
  </div>;


export default function Marine() {
  const [location, setLocation] = useState('Gold Coast, Australia');
  const [marineData, setMarineData] = useState(null);
  const [isLoading, setIsLoading] = useState(false);
  const [error, setError] = useState(null);
  const [searchSuggestions, setSearchSuggestions] = useState([]);
  const [showSuggestions, setShowSuggestions] = useState(false);
  const [isSearching, setIsSearching] = useState(false);

  // Predefined coastal locations for better UX
  const popularCoastalLocations = [
  'Gold Coast, Australia',
  'Sydney, Australia',
  'Perth, Australia',
  'Darwin, Australia',
  'Cairns, Australia',
  'Adelaide, Australia',
  'Hobart, Australia',
  'Auckland, New Zealand',
  'Wellington, New Zealand',
  'Miami, Florida, USA',
  'San Diego, California, USA',
  'Vancouver, Canada',
  'Brighton, UK',
  'Nice, France',
  'Barcelona, Spain'];


  const handleInputChange = async (e) => {
    const value = e.target.value;
    setLocation(value);

    if (value.length > 2) {
      setIsSearching(true);

      // Filter popular locations first
      const popularMatches = popularCoastalLocations.filter((loc) =>
      loc.toLowerCase().includes(value.toLowerCase())
      );

      // Add some AI-powered suggestions for coastal areas
      try {
        const aiSuggestions = await InvokeLLM({
          prompt: `Suggest 5 coastal cities or marine locations that match the search term "${value}". Focus on places with good marine/coastal weather data. Return only the city names with country, formatted like "City, Country".`,
          response_json_schema: {
            type: "object",
            properties: {
              suggestions: {
                type: "array",
                items: { type: "string" },
                maxItems: 5
              }
            }
          }
        });

        // Combine unique suggestions, prioritize popular matches
        const combinedSet = new Set(popularMatches.slice(0, 3)); // Add top popular matches first
        (aiSuggestions.suggestions || []).forEach((sugg) => combinedSet.add(sugg)); // Add AI suggestions
        const combinedSuggestions = Array.from(combinedSet).slice(0, 8); // Convert to array and limit

        setSearchSuggestions(combinedSuggestions);
      } catch (err) {
        console.error("AI suggestion failed:", err);
        // Fallback to just popular matches if AI fails
        setSearchSuggestions(popularMatches.slice(0, 5));
      }

      setShowSuggestions(true);
      setIsSearching(false);
    } else {
      setSearchSuggestions([]);
      setShowSuggestions(false);
      setIsSearching(false);
    }
  };

  const handleSuggestionClick = (selectedLocation) => {
    setLocation(selectedLocation);
    setShowSuggestions(false);
    fetchMarineData(selectedLocation);
  };

  const fetchMarineData = async (loc) => {
    if (!loc) {
      setError("Please enter a location.");
      return;
    }
    setIsLoading(true);
    setError(null);
    setMarineData(null);

    try {
      const response = await InvokeLLM({
        prompt: `Provide a comprehensive marine and coastal forecast for ${loc}.
        Include the following details in the JSON response:
        - General summary of conditions.
        - Tide times: next two high tides and next two low tides with times and heights in meters.
        - Wave forecast: significant wave height (meters), primary swell direction, and wave period (seconds).
        - Wind forecast: wind speed (knots) and wind direction for morning, afternoon, and evening.
        - Sea surface temperature in Celsius.`,
        add_context_from_internet: true,
        response_json_schema: {
          type: "object",
          properties: {
            summary: { type: "string" },
            tides: {
              type: "array",
              items: {
                type: "object",
                properties: {
                  type: { type: "string", enum: ["High", "Low"] },
                  time: { type: "string" },
                  height: { type: "number" }
                },
                required: ["type", "time", "height"]
              }
            },
            waves: {
              type: "object",
              properties: {
                height: { type: "number" },
                direction: { type: "string" },
                period: { type: "number" }
              },
              required: ["height", "direction", "period"]
            },
            wind: {
              type: "array",
              items: {
                type: "object",
                properties: {
                  period: { type: "string" },
                  speed: { type: "number" },
                  direction: { type: "string" }
                },
                required: ["period", "speed", "direction"]
              }
            },
            sea_temp: { type: "number" }
          },
          required: ["summary", "tides", "waves", "wind", "sea_temp"]
        }
      });
      setMarineData(response);
    } catch (err) {
      console.error("Failed to fetch marine data:", err);
      setError("Could not retrieve marine forecast. Please try another location.");
    } finally {
      setIsLoading(false);
    }
  };

  const handleSearch = (e) => {
    e.preventDefault();
    setShowSuggestions(false); // Hide suggestions on explicit search
    fetchMarineData(location);
  };

  // Fetch initial data on mount
  useEffect(() => {
    fetchMarineData(location);
  }, []);

  return (
    <div className="min-h-screen p-6">
      <div className="max-w-4xl mx-auto">
        <motion.div initial={{ opacity: 0, y: -20 }} animate={{ opacity: 1, y: 0 }} className="mb-8">
          <div className="flex items-center space-x-3 mb-4">
            <Sailboat className="w-10 h-10 text-blue-400" />
            <div>
              <h1 className="text-3xl font-bold">Marine & Coastal Forecast</h1>
              <p className="text-white/70">Tides, waves, and wind conditions for your coastal adventures.</p>
            </div>
          </div>
          <form onSubmit={handleSearch} className="relative">
            <div className="flex space-x-2">
              <div className="flex-1 relative">
                <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 text-white/50 w-5 h-5" />
                <Input
                  type="text"
                  value={location}
                  onChange={handleInputChange}
                  onFocus={() => location.length > 2 && searchSuggestions.length > 0 && setShowSuggestions(true)}
                  onBlur={() => setTimeout(() => setShowSuggestions(false), 100)} // Delay to allow click on suggestion
                  placeholder="Search for a coastal city... (e.g., Gold Coast, Sydney, Miami)"
                  className="pl-10 pr-10 glass-effect-dark border-white/20 text-white placeholder:text-white/50"
                  disabled={isLoading} />

                {/* Search Suggestions Dropdown */}
                {showSuggestions && searchSuggestions.length > 0 &&
                <div className="absolute top-full left-0 right-0 mt-2 bg-gray-800 rounded-lg shadow-xl border border-gray-700 z-50 max-h-60 overflow-y-auto">
                    {searchSuggestions.map((suggestion, index) =>
                  <button
                    key={index}
                    type="button"
                    onMouseDown={(e) => e.preventDefault()} // Prevent input blur on mouse down
                    onClick={() => handleSuggestionClick(suggestion)}
                    className="w-full px-4 py-3 text-left hover:bg-gray-700 transition-colors duration-200 flex items-center space-x-2 text-white">

                        <MapPin className="w-4 h-4 text-blue-400" />
                        <span>{suggestion}</span>
                      </button>
                  )}
                  </div>
                }

                {isSearching &&
                <div className="absolute right-3 top-1/2 transform -translate-y-1/2">
                    <Loader2 className="w-4 h-4 animate-spin text-white/50" />
                  </div>
                }
              </div>

              <Button type="submit" className="bg-blue-600 hover:bg-blue-700" disabled={isLoading}>
                {isLoading ? <Loader2 className="w-4 h-4 animate-spin" /> : <Search className="w-4 h-4" />}
              </Button>
            </div>
            {error && <p className="text-red-400 mt-2">{error}</p>}
          </form>
        </motion.div>

        {/* Quick Access Buttons for Popular Coastal Locations */}
        <motion.div
          initial={{ opacity: 0, y: 10 }}
          animate={{ opacity: 1, y: 0 }}
          className="mb-6">

          <p className="text-white/60 text-sm mb-3">Popular coastal locations:</p>
          <div className="flex flex-wrap gap-2">
            {popularCoastalLocations.slice(0, 6).map((loc) =>
            <Button
              key={loc}
              variant="outline"
              size="sm"
              onClick={() => handleSuggestionClick(loc)}
              className="glass-effect-dark border-white/20 text-white/80 hover:text-white hover:bg-white/10">

                {loc.split(',')[0]} {/* Show just the city name */}
              </Button>
            )}
          </div>
        </motion.div>

        {isLoading &&
        <div className="flex justify-center items-center h-64">
            <Loader2 className="w-12 h-12 animate-spin text-blue-400" />
          </div>
        }

        {marineData &&
        <motion.div initial={{ opacity: 0, y: 20 }} animate={{ opacity: 1, y: 0 }}>
            <Card className="glass-effect-dark border-white/20 mb-6">
              <CardHeader>
                <CardTitle className="text-slate-50 font-semibold leading-none tracking-tight">Forecast Summary for {location}</CardTitle>
              </CardHeader>
              <CardContent>
                <p className="text-white/90">{marineData.summary}</p>
              </CardContent>
            </Card>

            <Tabs defaultValue="tides" className="w-full">
              <TabsList className="grid w-full grid-cols-3 bg-gray-800/50">
                <TabsTrigger value="tides">Tides</TabsTrigger>
                <TabsTrigger value="waves">Waves</TabsTrigger>
                <TabsTrigger value="wind">Wind</TabsTrigger>
              </TabsList>
              <TabsContent value="tides" className="mt-4">
                <Card className="glass-effect-dark border-white/20">
                  <CardHeader><CardTitle className="text-2xl text-slate-50 font-semibold leading-none tracking-tight">Tide Schedule</CardTitle></CardHeader>
                  <CardContent className="space-y-3">
                    {marineData.tides.map((tide, i) => <TideInfo key={i} {...tide} />)}
                  </CardContent>
                </Card>
              </TabsContent>
              <TabsContent value="waves" className="mt-4">
                <Card className="glass-effect-dark border-white/20">
                  <CardHeader className="text-slate-50 p-6 flex flex-col space-y-1.5"><CardTitle>Wave Conditions</CardTitle></CardHeader>
                  <CardContent className="grid grid-cols-2 md:grid-cols-4 gap-4">
                    <InfoCard title="Wave Height" value={marineData.waves.height} unit="m" icon={Waves} />
                    <InfoCard title="Swell Direction" value={marineData.waves.direction} unit="" icon={Wind} />
                    <InfoCard title="Wave Period" value={marineData.waves.period} unit="s" icon={Sailboat} />
                    <InfoCard title="Sea Temp" value={`${marineData.sea_temp}°`} unit="C" icon={Sun} />
                  </CardContent>
                </Card>
              </TabsContent>
              <TabsContent value="wind" className="mt-4">
                <Card className="glass-effect-dark border-white/20">
                  <CardHeader><CardTitle className="text-slate-50 font-semibold leading-none tracking-tight">Wind Forecast</CardTitle></CardHeader>
                  <CardContent className="grid grid-cols-1 md:grid-cols-3 gap-4">
                    {marineData.wind.map((w, i) =>
                  <div key={i} className="glass-effect-dark p-4 rounded-lg text-center">
                        <p className="text-slate-50 mb-2 text-lg font-semibold">{w.period}</p>
                        <p className="text-slate-50 font-bold">{w.speed} <span className="text-base font-normal">knots</span></p>
                        <p className="text-white/70">{w.direction}</p>
                      </div>
                  )}
                  </CardContent>
                </Card>
              </TabsContent>
            </Tabs>
          </motion.div>
        }

        {/* Click outside to hide suggestions */}
        {showSuggestions &&
        <div
          className="fixed inset-0 z-40"
          onClick={() => setShowSuggestions(false)} />

        }
      </div>
    </div>);
