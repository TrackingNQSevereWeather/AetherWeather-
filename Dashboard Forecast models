import React, { useState, useEffect, useCallback } from 'react';
import { motion } from 'framer-motion';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Input } from '@/components/ui/input';
import { Button } from '@/components/ui/button';
import { Badge } from '@/components/ui/badge';
import { InvokeLLM } from '@/integrations/Core';
import { Layers, CloudSun, Search, MapPin, Loader2, AlertTriangle, Calendar, TrendingUp, BarChart3, RefreshCw } from 'lucide-react';
import ModelCard from '../components/models/ModelCard';

const models = [
  {
    name: 'GFS',
    type: 'Global Model',
    description: 'The Global Forecast System provides comprehensive weather forecasts with global coverage and medium-range accuracy.',
    strengths: ['Global Coverage', 'Free Access', 'Good for General Forecasting'],
  },
  {
    name: 'ECMWF',
    type: 'European Model',
    description: 'European Centre for Medium-Range Weather Forecasts - highly accurate global model known for superior medium-range forecasts.',
    strengths: ['High Accuracy', 'Medium-Range Excellence', 'Tropical Cyclone Tracking'],
  },
  {
    name: 'ACCESS-G',
    type: 'Australian Model',
    description: 'Australian Community Climate and Earth-System Simulator - optimized for Australian weather patterns and conditions.',
    strengths: ['Australian Focus', 'Local Accuracy', 'Regional Optimization'],
  },
];

export default function ForecastModelsPage() {
  const [location, setLocation] = useState('Townsville, Australia');
  const [tempLocation, setTempLocation] = useState('Townsville, Australia');
  const [insights, setInsights] = useState({});
  const [longRangeData, setLongRangeData] = useState(null);
  const [isLoadingInsights, setIsLoadingInsights] = useState(false);
  const [isLoadingLongRange, setIsLoadingLongRange] = useState(false);
  const [lastUpdated, setLastUpdated] = useState(null);

  const fetchModelInsights = useCallback(async () => {
    setIsLoadingInsights(true);
    const newInsights = {};

    try {
      const insightPromises = models.map(async (model) => {
        try {
          const response = await InvokeLLM({
            prompt: `Provide a brief, single sentence insight about the ${model.name} weather model's current forecast for ${location}. Focus on what makes this model's forecast unique or noteworthy for the next 3-5 days.`,
            add_context_from_internet: true
          });
          return { modelName: model.name, insight: response };
        } catch (error) {
          console.error(`Error fetching insight for ${model.name}:`, error);
          return { modelName: model.name, insight: `${model.name} data currently unavailable.` };
        }
      });

      const results = await Promise.allSettled(insightPromises);
      results.forEach((result) => {
        if (result.status === 'fulfilled') {
          newInsights[result.value.modelName] = result.value.insight;
        }
      });
    } catch (error) {
      console.error('Error fetching model insights:', error);
    } finally {
      setInsights(newInsights);
      setIsLoadingInsights(false);
    }
  }, [location]);

  const fetchLongRangeOutlook = useCallback(async () => {
    setIsLoadingLongRange(true);
    
    try {
      const response = await InvokeLLM({
        prompt: `Provide a comprehensive 7-14 day weather outlook for ${location}. Include pattern analysis, potential weather systems, and confidence levels.`,
        add_context_from_internet: true,
        response_json_schema: {
          type: "object",
          properties: {
            pattern_summary: { type: "string" },
            week_1_outlook: { type: "string" },
            week_2_outlook: { type: "string" },
            confidence_level: { type: "string", enum: ["High", "Medium", "Low"] },
            key_systems: { type: "array", items: { type: "string" } },
            temperature_trend: { type: "string", enum: ["Above Average", "Average", "Below Average"] },
            precipitation_outlook: { type: "string", enum: ["Above Average", "Average", "Below Average"] }
          }
        }
      });

      if (response) {
        setLongRangeData(response);
        setLastUpdated(new Date());
      }
    } catch (error) {
      console.error('Error fetching long-range outlook:', error);
      setLongRangeData(null);
    } finally {
      setIsLoadingLongRange(false);
    }
  }, [location]);

  useEffect(() => {
    fetchModelInsights();
    fetchLongRangeOutlook();
  }, [location, fetchModelInsights, fetchLongRangeOutlook]);

  const handleLocationSubmit = (e) => {
    e.preventDefault();
    setLocation(tempLocation);
  };

  const getConfidenceColor = (confidence) => {
    switch (confidence) {
      case 'High': return 'bg-green-100 text-green-800 dark:bg-green-900/20 dark:text-green-200';
      case 'Medium': return 'bg-yellow-100 text-yellow-800 dark:bg-yellow-900/20 dark:text-yellow-200';
      case 'Low': return 'bg-red-100 text-red-800 dark:bg-red-900/20 dark:text-red-200';
      default: return 'bg-gray-100 text-gray-800 dark:bg-gray-900/20 dark:text-gray-200';
    }
  };

  const getTrendColor = (trend) => {
    switch (trend) {
      case 'Above Average': return 'text-red-400';
      case 'Below Average': return 'text-blue-400';
      default: return 'text-gray-400';
    }
  };

  return (
    <div className="min-h-screen p-6">
      <div className="max-w-7xl mx-auto space-y-8">
        {/* Header Section */}
        <motion.div 
          initial={{ opacity: 0, y: -20 }} 
          animate={{ opacity: 1, y: 0 }} 
          className="text-center space-y-4"
        >
          <div className="flex items-center justify-center space-x-3 mb-4">
            <div className="w-12 h-12 bg-gradient-to-br from-blue-500 to-purple-600 rounded-xl flex items-center justify-center">
              <Layers className="w-7 h-7 text-white" />
            </div>
            <div>
              <h1 className="text-4xl font-bold text-white">Forecast Models</h1>
              <p className="text-white/70">Compare global weather prediction models</p>
            </div>
          </div>

          {/* Location Input */}
          <form onSubmit={handleLocationSubmit} className="flex justify-center">
            <div className="flex space-x-3 w-full max-w-md">
              <div className="relative flex-1">
                <MapPin className="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 w-5 h-5" />
                <Input
                  type="text"
                  placeholder="Enter location..."
                  value={tempLocation}
                  onChange={(e) => setTempLocation(e.target.value)}
                  className="pl-10 glass-effect-dark border-white/20 text-white placeholder-white/50"
                />
              </div>
              <Button 
                type="submit" 
                className="bg-blue-600 hover:bg-blue-700 text-white"
                disabled={isLoadingInsights || !tempLocation.trim()}
              >
                <Search className="w-4 h-4" />
              </Button>
            </div>
          </form>
        </motion.div>

        {/* Model Cards Grid */}
        <motion.div
          initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ duration: 0.6, delay: 0.2 }}
        >
          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
            {models.map((model, index) => (
              <ModelCard
                key={model.name}
                model={model}
                insight={insights[model.name] || "Loading insights..."}
                isLoading={isLoadingInsights}
              />
            ))}
          </div>
        </motion.div>

        {/* Long-Range Outlook Section */}
        <motion.div
          initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ duration: 0.6, delay: 0.4 }}
        >
          <Card className="glass-effect-dark border-white/20">
            <CardHeader>
              <div className="flex items-center justify-between">
                <CardTitle className="flex items-center space-x-2 text-white">
                  <Calendar className="w-5 h-5 text-purple-400" />
                  <span>Extended Outlook (7-14 Days)</span>
                </CardTitle>
                <Button
                  onClick={fetchLongRangeOutlook}
                  disabled={isLoadingLongRange}
                  variant="outline"
                  size="sm"
                  className="bg-transparent border-white/20 text-white hover:bg-white/20"
                >
                  <RefreshCw className={`w-4 h-4 ${isLoadingLongRange ? 'animate-spin' : ''}`} />
                </Button>
              </div>
              {lastUpdated && (
                <p className="text-xs text-gray-400">
                  Last updated: {lastUpdated.toLocaleTimeString()}
                </p>
              )}
            </CardHeader>
            <CardContent>
              {isLoadingLongRange ? (
                <div className="h-48 flex items-center justify-center">
                  <div className="text-center">
                    <Loader2 className="w-8 h-8 animate-spin mx-auto mb-2 text-purple-400" />
                    <p className="text-sm text-gray-400">Analyzing long-range patterns...</p>
                  </div>
                </div>
              ) : longRangeData ? (
                <div className="space-y-6">
                  {/* Pattern Summary */}
                  <div className="bg-gray-800/30 p-4 rounded-lg">
                    <h3 className="font-semibold text-white mb-2">Weather Pattern Analysis</h3>
                    <p className="text-sm text-gray-300">{longRangeData.pattern_summary}</p>
                  </div>

                  {/* Confidence and Trends */}
                  <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
                    <div className="bg-gray-800/20 p-4 rounded-lg text-center">
                      <Badge className={`${getConfidenceColor(longRangeData.confidence_level)} mb-2`}>
                        {longRangeData.confidence_level} Confidence
                      </Badge>
                      <div className="text-xs text-gray-400">Forecast Reliability</div>
                    </div>

                    <div className="bg-gray-800/20 p-4 rounded-lg text-center">
                      <div className={`text-lg font-bold ${getTrendColor(longRangeData.temperature_trend)}`}>
                        {longRangeData.temperature_trend}
                      </div>
                      <div className="text-xs text-gray-400">Temperature Trend</div>
                    </div>

                    <div className="bg-gray-800/20 p-4 rounded-lg text-center">
                      <div className={`text-lg font-bold ${getTrendColor(longRangeData.precipitation_outlook)}`}>
                        {longRangeData.precipitation_outlook}
                      </div>
                      <div className="text-xs text-gray-400">Rainfall Outlook</div>
                    </div>
                  </div>

                  {/* Weekly Outlooks */}
                  <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                    <div className="bg-blue-900/20 p-4 rounded-lg border border-blue-500/30">
                      <h4 className="font-semibold text-white mb-2 flex items-center space-x-2">
                        <Calendar className="w-4 h-4 text-blue-400" />
                        <span>Week 1 (Days 1-7)</span>
                      </h4>
                      <p className="text-sm text-gray-300">{longRangeData.week_1_outlook}</p>
                    </div>

                    <div className="bg-purple-900/20 p-4 rounded-lg border border-purple-500/30">
                      <h4 className="font-semibold text-white mb-2 flex items-center space-x-2">
                        <Calendar className="w-4 h-4 text-purple-400" />
                        <span>Week 2 (Days 8-14)</span>
                      </h4>
                      <p className="text-sm text-gray-300">{longRangeData.week_2_outlook}</p>
                    </div>
                  </div>

                  {/* Key Weather Systems */}
                  {longRangeData.key_systems && longRangeData.key_systems.length > 0 && (
                    <div className="bg-gray-800/30 p-4 rounded-lg">
                      <h4 className="font-semibold text-white mb-3 flex items-center space-x-2">
                        <CloudSun className="w-4 h-4 text-yellow-400" />
                        <span>Key Weather Systems</span>
                      </h4>
                      <div className="space-y-2">
                        {longRangeData.key_systems.map((system, index) => (
                          <div key={index} className="flex items-start space-x-2">
                            <div className="w-2 h-2 bg-blue-400 rounded-full mt-2 flex-shrink-0" />
                            <p className="text-sm text-gray-300">{system}</p>
                          </div>
                        ))}
                      </div>
                    </div>
                  )}
                </div>
              ) : (
                <div className="h-48 flex items-center justify-center">
                  <div className="text-center text-gray-400">
                    <BarChart3 className="w-12 h-12 mx-auto mb-2 opacity-50" />
                    <p>Unable to load extended outlook</p>
                    <Button onClick={fetchLongRangeOutlook} variant="ghost" size="sm" className="mt-2 text-white">
                      Try again
                    </Button>
                  </div>
                </div>
              )}
            </CardContent>
          </Card>
        </motion.div>

        {/* Model Performance Comparison */}
        <motion.div
          initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ duration: 0.6, delay: 0.6 }}
        >
          <Card className="glass-effect-dark border-white/20">
            <CardHeader>
              <CardTitle className="flex items-center space-x-2 text-white">
                <TrendingUp className="w-5 h-5 text-green-400" />
                <span>Model Performance Guide</span>
              </CardTitle>
            </CardHeader>
            <CardContent>
              <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
                <div className="bg-blue-900/20 p-4 rounded-lg border border-blue-500/30">
                  <h4 className="font-semibold text-blue-300 mb-3">Short-Range (1-3 Days)</h4>
                  <div className="space-y-2 text-sm text-gray-300">
                    <div className="flex justify-between">
                      <span>GFS:</span>
                      <Badge variant="outline" className="border-blue-400 text-blue-400">Excellent</Badge>
                    </div>
                    <div className="flex justify-between">
                      <span>ECMWF:</span>
                      <Badge variant="outline" className="border-green-400 text-green-400">Superior</Badge>
                    </div>
                    <div className="flex justify-between">
                      <span>ACCESS-G:</span>
                      <Badge variant="outline" className="border-green-400 text-green-400">Excellent*</Badge>
                    </div>
                    <p className="text-xs text-gray-400 mt-2">*For Australian locations</p>
                  </div>
                </div>

                <div className="bg-purple-900/20 p-4 rounded-lg border border-purple-500/30">
                  <h4 className="font-semibold text-purple-300 mb-3">Medium-Range (4-7 Days)</h4>
                  <div className="space-y-2 text-sm text-gray-300">
                    <div className="flex justify-between">
                      <span>GFS:</span>
                      <Badge variant="outline" className="border-yellow-400 text-yellow-400">Good</Badge>
                    </div>
                    <div className="flex justify-between">
                      <span>ECMWF:</span>
                      <Badge variant="outline" className="border-green-400 text-green-400">Superior</Badge>
                    </div>
                    <div className="flex justify-between">
                      <span>ACCESS-G:</span>
                      <Badge variant="outline" className="border-blue-400 text-blue-400">Good</Badge>
                    </div>
                  </div>
                </div>

                <div className="bg-green-900/20 p-4 rounded-lg border border-green-500/30">
                  <h4 className="font-semibold text-green-300 mb-3">Extended (8-14 Days)</h4>
                  <div className="space-y-2 text-sm text-gray-300">
                    <div className="flex justify-between">
                      <span>GFS:</span>
                      <Badge variant="outline" className="border-orange-400 text-orange-400">Fair</Badge>
                    </div>
                    <div className="flex justify-between">
                      <span>ECMWF:</span>
                      <Badge variant="outline" className="border-yellow-400 text-yellow-400">Good</Badge>
                    </div>
                    <div className="flex justify-between">
                      <span>ACCESS-G:</span>
                      <Badge variant="outline" className="border-orange-400 text-orange-400">Fair</Badge>
                    </div>
                  </div>
                </div>
              </div>

              <div className="mt-6 bg-gray-800/30 p-4 rounded-lg">
                <h4 className="font-semibold text-white mb-2 flex items-center space-x-2">
                  <AlertTriangle className="w-4 h-4 text-yellow-400" />
                  <span>Usage Guidelines</span>
                </h4>
                <div className="text-sm text-gray-300 space-y-1">
                  <p>• Use multiple models for better forecast confidence</p>
                  <p>• ECMWF typically most accurate for 3-10 day forecasts</p>
                  <p>• ACCESS-G best for detailed Australian regional weather</p>
                  <p>• GFS provides good global perspective and ensemble data</p>
                </div>
              </div>
            </CardContent>
          </Card>
        </motion.div>
      </div>
    </div>
  );
