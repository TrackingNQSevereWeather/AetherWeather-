
import React, { useState, useEffect } from 'react';
import { motion } from 'framer-motion';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Badge } from '@/components/ui/badge';
import { Button } from '@/components/ui/button';
import { InvokeLLM } from '@/integrations/Core';
import { Flower2, RefreshCw, Loader2, Wind, Eye, AlertTriangle } from 'lucide-react';
import { useTheme } from '../theme/ThemeProvider';

const pollenLevels = {
  'Very Low': { bg: 'bg-green-100 text-green-800', color: '#22c55e', icon: 'üü¢' },
  'Low': { bg: 'bg-green-100 text-green-800', color: '#22c55e', icon: 'üü¢' },
  'Moderate': { bg: 'bg-yellow-100 text-yellow-800', color: '#eab308', icon: 'üü°' },
  'High': { bg: 'bg-orange-100 text-orange-800', color: '#f97316', icon: 'üü†' },
  'Very High': { bg: 'bg-red-100 text-red-800', color: '#ef4444', icon: 'üî¥' },
  'Extreme': { bg: 'bg-purple-100 text-purple-800', color: '#a855f7', icon: 'üü£' }
};

export default function PollenForecast({ weatherData }) {
  const { theme } = useTheme();
  const [pollenData, setPollenData] = useState(null);
  const [isLoading, setIsLoading] = useState(false);
  const [lastUpdated, setLastUpdated] = useState(null);

  const fetchPollenData = async () => {
    if (!weatherData?.location) return;

    setIsLoading(true);
    try {
      const response = await InvokeLLM({
        prompt: `Get current pollen and allergy forecast for ${weatherData.location}. 

        Provide detailed information about:
        - Overall pollen index (0-12 scale)
        - Tree pollen levels and main types (e.g., oak, birch, pine)
        - Grass pollen levels and types
        - Weed pollen levels (ragweed, etc.)
        - Mold spore levels
        - Peak times of day for pollen release
        - 5-day pollen forecast
        - Allergy recommendations and precautions
        - Weather factors affecting pollen (wind, rain, temperature)

        Use current weather conditions to inform the forecast: Temperature ${weatherData.current_temp}¬∞C, Humidity ${weatherData.humidity}%, Wind ${weatherData.wind_speed} km/h`,
        add_context_from_internet: true,
        response_json_schema: {
          type: "object",
          properties: {
            overall_index: { type: "number", description: "Overall pollen index 0-12" },
            overall_level: { type: "string", enum: ["Very Low", "Low", "Moderate", "High", "Very High", "Extreme"] },
            tree_pollen: {
              type: "object",
              properties: {
                level: { type: "string" },
                index: { type: "number" },
                dominant_types: { type: "array", items: { type: "string" } }
              }
            },
            grass_pollen: {
              type: "object",
              properties: {
                level: { type: "string" },
                index: { type: "number" },
                types: { type: "array", items: { type: "string" } }
              }
            },
            weed_pollen: {
              type: "object",
              properties: {
                level: { type: "string" },
                index: { type: "number" },
                types: { type: "array", items: { type: "string" } }
              }
            },
            mold_spores: {
              type: "object",
              properties: {
                level: { type: "string" },
                index: { type: "number" }
              }
            },
            peak_times: { type: "array", items: { type: "string" } },
            forecast: {
              type: "array",
              items: {
                type: "object",
                properties: {
                  date: { type: "string" },
                  level: { type: "string" },
                  index: { type: "number" },
                  dominant_allergen: { type: "string" }
                }
              }
            },
            recommendations: { type: "array", items: { type: "string" } },
            weather_impact: { type: "string" }
          }
        }
      });

      if (response) {
        setPollenData(response);
        setLastUpdated(new Date());
      }
    } catch (error) {
      console.error('Error fetching pollen data:', error);
    } finally {
      setIsLoading(false);
    }
  };

  useEffect(() => {
    if (weatherData?.location) {
      fetchPollenData();
    }
  }, [weatherData?.location]);

  if (!weatherData) return null;

  return (
    <motion.div
      initial={{ opacity: 0, y: 20 }}
      animate={{ opacity: 1, y: 0 }}
      transition={{ duration: 0.6, delay: 0.6 }}>

      <Card className={`${theme === 'dark' ? 'glass-effect-dark' : 'glass-effect-light'} border-white/20`}>
        <CardHeader>
          <div className="flex items-center justify-between">
            <CardTitle className="flex items-center space-x-2 text-gray-900 dark:text-white">
              <Flower2 className="w-5 h-5 text-pink-500" />
              <span>Pollen Forecast</span>
            </CardTitle>
            <Button
              onClick={fetchPollenData}
              disabled={isLoading}
              variant="outline"
              size="sm" className="bg-slate-950 text-slate-50 px-3 text-sm font-medium inline-flex items-center justify-center gap-2 whitespace-nowrap ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 border border-input hover:bg-accent hover:text-accent-foreground h-9 rounded-md">
              <RefreshCw className={`w-4 h-4 ${isLoading ? 'animate-spin' : ''}`} />
            </Button>
          </div>
          {lastUpdated &&
          <p className="text-xs text-gray-600 dark:text-gray-400">
              Last updated: {lastUpdated.toLocaleTimeString()}
            </p>
          }
        </CardHeader>
        <CardContent>
          {isLoading ?
          <div className="h-48 flex items-center justify-center">
              <div className="text-center">
                <Loader2 className="w-8 h-8 animate-spin mx-auto mb-2 text-pink-500" />
                <p className="text-sm text-gray-600 dark:text-gray-400">Loading pollen data...</p>
              </div>
            </div> :
          pollenData ?
          <div className="space-y-6">
              {/* Overall Pollen Index */}
              <div className="flex items-center justify-between">
                <div className="flex items-center space-x-3">
                  <div className="text-3xl font-bold text-gray-900 dark:text-white">
                    {pollenData.overall_index}/12
                  </div>
                  <Badge className={`${pollenLevels[pollenData.overall_level]?.bg || 'bg-gray-100 text-gray-800'} font-semibold px-3 py-1`}>
                    <span className="mr-2">{pollenLevels[pollenData.overall_level]?.icon || '‚ö™'}</span>
                    {pollenData.overall_level}
                  </Badge>
                </div>
                <Flower2 className="w-8 h-8" style={{ color: pollenLevels[pollenData.overall_level]?.color || '#6b7280' }} />
              </div>

              {/* Pollen Breakdown */}
              <div className="grid grid-cols-2 md:grid-cols-4 gap-4">
                <div className={`p-4 rounded-lg ${theme === 'dark' ? 'bg-gray-800/30' : 'bg-gray-50'}`}>
                  <div className="text-center">
                    <div className="text-lg font-bold text-gray-900 dark:text-white mb-1">üå≥</div>
                    <div className="text-slate-50 text-sm font-semibold dark:text-white">{pollenData.tree_pollen?.level || 'N/A'}</div>
                    <div className="text-xs text-gray-600 dark:text-gray-400">Trees</div>
                  </div>
                </div>

                <div className={`p-4 rounded-lg ${theme === 'dark' ? 'bg-gray-800/30' : 'bg-gray-50'}`}>
                  <div className="text-center">
                    <div className="text-lg font-bold text-gray-900 dark:text-white mb-1">üåæ</div>
                    <div className="text-slate-50 text-sm font-semibold dark:text-white">{pollenData.grass_pollen?.level || 'N/A'}</div>
                    <div className="text-xs text-gray-600 dark:text-gray-400">Grass</div>
                  </div>
                </div>

                <div className={`p-4 rounded-lg ${theme === 'dark' ? 'bg-gray-800/30' : 'bg-gray-50'}`}>
                  <div className="text-center">
                    <div className="text-lg font-bold text-gray-900 dark:text-white mb-1">üåø</div>
                    <div className="text-slate-50 text-sm font-semibold dark:text-white">{pollenData.weed_pollen?.level || 'N/A'}</div>
                    <div className="text-xs text-gray-600 dark:text-gray-400">Weeds</div>
                  </div>
                </div>

                <div className={`p-4 rounded-lg ${theme === 'dark' ? 'bg-gray-800/30' : 'bg-gray-50'}`}>
                  <div className="text-center">
                    <div className="text-lg font-bold text-gray-900 dark:text-white mb-1">üçÑ</div>
                    <div className="text-slate-50 text-sm font-semibold dark:text-white">{pollenData.mold_spores?.level || 'N/A'}</div>
                    <div className="text-xs text-gray-600 dark:text-gray-400">Mold</div>
                  </div>
                </div>
              </div>

              {/* 5-Day Forecast */}
              {pollenData.forecast && pollenData.forecast.length > 0 &&
            <div>
                  <h4 className="font-semibold mb-3 text-gray-900 dark:text-white">5-Day Pollen Forecast</h4>
                  <div className="grid grid-cols-1 sm:grid-cols-5 gap-2">
                    {pollenData.forecast.slice(0, 5).map((day, index) =>
                <div key={index} className={`p-3 rounded-lg text-center ${theme === 'dark' ? 'bg-gray-800/20' : 'bg-gray-50/50'}`}>
                        <div className="text-xs text-gray-600 dark:text-gray-400 mb-1">
                          {new Date(day.date).toLocaleDateString([], { weekday: 'short' })}
                        </div>
                        <div className="text-slate-50 text-sm font-bold dark:text-white">{day.index}/12</div>
                        <div className="text-xs text-gray-600 dark:text-gray-400">{day.level}</div>
                      </div>
                )}
                  </div>
                </div>
            }

              {/* Peak Times */}
              {pollenData.peak_times && pollenData.peak_times.length > 0 &&
            <div className={`p-4 rounded-lg ${theme === 'dark' ? 'bg-blue-900/20' : 'bg-blue-50'} border border-blue-200 dark:border-blue-800`}>
                  <div className="flex items-center space-x-2 mb-2">
                    <Eye className="w-4 h-4 text-blue-600 dark:text-blue-400" />
                    <span className="font-semibold text-blue-800 dark:text-blue-200">Peak Pollen Times</span>
                  </div>
                  <p className="text-sm text-blue-700 dark:text-blue-300">
                    {pollenData.peak_times.join(', ')}
                  </p>
                </div>
            }

              {/* Weather Impact */}
              {pollenData.weather_impact &&
            <div className={`p-4 rounded-lg ${theme === 'dark' ? 'bg-green-900/20' : 'bg-green-50'} border border-green-200 dark:border-green-800`}>
                  <div className="flex items-center space-x-2 mb-2">
                    <Wind className="w-4 h-4 text-green-600 dark:text-green-400" />
                    <span className="font-semibold text-green-800 dark:text-green-200">Weather Impact</span>
                  </div>
                  <p className="text-sm text-green-700 dark:text-green-300">
                    {pollenData.weather_impact}
                  </p>
                </div>
            }

              {/* Recommendations */}
              {pollenData.recommendations && pollenData.recommendations.length > 0 &&
            <div className={`p-4 rounded-lg ${theme === 'dark' ? 'bg-amber-900/20' : 'bg-amber-50'} border border-amber-200 dark:border-amber-800`}>
                  <div className="flex items-center space-x-2 mb-3">
                    <AlertTriangle className="w-4 h-4 text-amber-600 dark:text-amber-400" />
                    <span className="font-semibold text-amber-800 dark:text-amber-200">Allergy Recommendations</span>
                  </div>
                  <ul className="space-y-1">
                    {pollenData.recommendations.map((rec, index) =>
                <li key={index} className="text-sm text-amber-700 dark:text-amber-300 flex items-start">
                        <span className="w-2 h-2 bg-amber-500 rounded-full mt-2 mr-2 flex-shrink-0" />
                        {rec}
                      </li>
                )}
                  </ul>
                </div>
            }
            </div> :

          <div className="h-48 flex items-center justify-center">
              <div className="text-center text-gray-600 dark:text-gray-400">
                <Flower2 className="w-12 h-12 mx-auto mb-2 opacity-50" />
                <p>Unable to load pollen data</p>
                <Button onClick={fetchPollenData} variant="ghost" size="sm" className="mt-2">
                  Try again
                </Button>
              </div>
            </div>
          }
        </CardContent>
      </Card>
    </motion.div>);
