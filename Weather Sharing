
import React, { useState, useEffect, useCallback } from 'react';
import { motion } from 'framer-motion';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Badge } from '@/components/ui/badge';
import { Textarea } from '@/components/ui/textarea';
import {
  Share2,
  Copy,
  Twitter,
  Facebook,
  MessageSquare,
  Mail,
  Link2,
  Check,
  Download } from
'lucide-react';
import { useTheme } from '../theme/ThemeProvider';

export default function WeatherSharing({ weatherData }) {
  const { theme, temperatureUnit } = useTheme();
  const [customMessage, setCustomMessage] = useState('');
  const [copySuccess, setCopySuccess] = useState(false);

  const convertTemp = (celsius) => {
    if (temperatureUnit === 'fahrenheit') {
      return Math.round(celsius * 9 / 5 + 32);
    }
    return Math.round(celsius);
  };

  if (!weatherData) return null;

  const generateWeatherText = () => {
    const tempUnit = temperatureUnit === 'celsius' ? 'C' : 'F';
    const baseText = `🌤️ Weather Update for ${weatherData.location}
    
📍 Current: ${convertTemp(weatherData.current_temp)}°${tempUnit} (feels like ${convertTemp(weatherData.feels_like)}°${tempUnit})
🌡️ Condition: ${weatherData.description}
💧 Humidity: ${weatherData.humidity}%
💨 Wind: ${weatherData.wind_speed} km/h ${weatherData.wind_direction}
👁️ Visibility: ${weatherData.visibility} km
📊 Pressure: ${weatherData.pressure} hPa`;

    return customMessage ? `${customMessage}\n\n${baseText}` : baseText;
  };

  const weatherText = generateWeatherText();

  const shareUrls = {
    twitter: `https://twitter.com/intent/tweet?text=${encodeURIComponent(weatherText)}`,
    facebook: `https://www.facebook.com/sharer/sharer.php?u=${encodeURIComponent(window.location.href)}&quote=${encodeURIComponent(weatherText)}`,
    email: `mailto:?subject=Weather Update - ${weatherData.location}&body=${encodeURIComponent(weatherText)}`
  };

  const copyToClipboard = async () => {
    try {
      await navigator.clipboard.writeText(weatherText);
      setCopySuccess(true);
      setTimeout(() => setCopySuccess(false), 2000);
    } catch (err) {
      console.error('Failed to copy:', err);
    }
  };

  const shareNative = async () => {
    if (navigator.share) {
      try {
        await navigator.share({
          title: `Weather Update - ${weatherData.location}`,
          text: weatherText,
          url: window.location.href
        });
      } catch (err) {
        console.error('Error sharing:', err);
      }
    }
  };

  const downloadWeatherReport = () => {
    const reportContent = `Weather Report - ${weatherData.location}
Generated on: ${new Date().toLocaleString()}

${weatherText}

---
Forecast (Next 3 Days):
${weatherData.forecast_data?.slice(0, 3).map((day) =>
    `${day.date}: ${convertTemp(day.high)}°/${convertTemp(day.low)}° - ${day.condition}`
    ).join('\n')}

Report generated by TrackingNQSevereWeather
${window.location.href}`;

    const blob = new Blob([reportContent], { type: 'text/plain' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = `weather-report-${weatherData.location.replace(/[^a-z0-9]/gi, '-').toLowerCase()}-${new Date().toISOString().split('T')[0]}.txt`;
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);
    URL.revokeObjectURL(url);
  };

  return (
    <motion.div
      initial={{ opacity: 0, y: 20 }}
      animate={{ opacity: 1, y: 0 }}
      transition={{ duration: 0.6, delay: 0.9 }}>

      <Card className={`${theme === 'dark' ? 'glass-effect-dark' : 'glass-effect-light'} border-white/20`}>
        <CardHeader>
          <CardTitle className="flex items-center space-x-2 text-gray-900 dark:text-white">
            <Share2 className="w-5 h-5 text-green-500" />
            <span>Share Weather</span>
          </CardTitle>
        </CardHeader>
        <CardContent className="space-y-4">
          {/* Custom Message */}
          <div>
            <label className="text-sm font-medium text-gray-900 dark:text-white mb-2 block">
              Add a personal message (optional):
            </label>
            <Textarea
              value={customMessage}
              onChange={(e) => setCustomMessage(e.target.value)}
              placeholder="e.g., Perfect weather for the beach today! ☀️"
              className={`${
              theme === 'dark' ?
              'bg-gray-800/30 border-gray-700 text-white' :
              'bg-white/50 border-gray-300'} resize-none`
              }
              rows={2} />

          </div>

          {/* Preview */}
          <div className={`p-3 rounded-lg border ${
          theme === 'dark' ?
          'border-gray-700 bg-gray-800/20' :
          'border-gray-200 bg-gray-50/50'}`
          }>
            <div className="text-xs text-gray-600 dark:text-gray-400 mb-2">Preview:</div>
            <div className="text-sm text-gray-900 dark:text-white whitespace-pre-line font-mono">
              {weatherText.length > 200 ? weatherText.substring(0, 200) + '...' : weatherText}
            </div>
          </div>

          {/* Social Sharing Buttons */}
          <div className="grid grid-cols-2 gap-3">
            <Button
              onClick={() => window.open(shareUrls.twitter, '_blank')}
              className="bg-blue-500 hover:bg-blue-600 text-white"
              size="sm">

              <Twitter className="w-4 h-4 mr-2" />
              Twitter
            </Button>
            
            <Button
              onClick={() => window.open(shareUrls.facebook, '_blank')}
              className="bg-blue-600 hover:bg-blue-700 text-white"
              size="sm">

              <Facebook className="w-4 h-4 mr-2" />
              Facebook
            </Button>
            
            <Button
              onClick={() => window.open(shareUrls.email)}
              variant="outline"
              size="sm" className="bg-transparent text-slate-50 px-3 text-sm font-medium inline-flex items-center justify-center gap-2 whitespace-nowrap ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 border border-input hover:bg-accent hover:text-accent-foreground h-9 rounded-md">


              <Mail className="w-4 h-4 mr-2" />
              Email
            </Button>
            
            {navigator.share &&
            <Button
              onClick={shareNative}
              variant="outline"
              size="sm" className="bg-transparent text-slate-50 px-3 text-sm font-medium inline-flex items-center justify-center gap-2 whitespace-nowrap ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 border border-input hover:bg-accent hover:text-accent-foreground h-9 rounded-md">


                <Share2 className="w-4 h-4 mr-2" />
                Share
              </Button>
            }
          </div>

          {/* Utility Buttons */}
          <div className="flex gap-2">
            <Button
              onClick={copyToClipboard}
              variant="outline"
              size="sm" className="bg-transparent text-slate-50 px-3 text-sm font-medium inline-flex items-center justify-center gap-2 whitespace-nowrap ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 border border-input hover:bg-accent hover:text-accent-foreground h-9 rounded-md flex-1">


              {copySuccess ?
              <>
                  <Check className="w-4 h-4 mr-2 text-green-500" />
                  Copied!
                </> :

              <>
                  <Copy className="w-4 h-4 mr-2" />
                  Copy Text
                </>
              }
            </Button>
            
            <Button
              onClick={downloadWeatherReport}
              variant="outline"
              size="sm" className="bg-transparent text-slate-50 px-3 text-sm font-medium inline-flex items-center justify-center gap-2 whitespace-nowrap ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 border border-input hover:bg-accent hover:text-accent-foreground h-9 rounded-md flex-1">


              <Download className="w-4 h-4 mr-2" />
              Download Report
            </Button>
          </div>

          {/* Share URL */}
          <div className="flex justify-between items-center">
              <Button
                onClick={() => {
                  navigator.clipboard.writeText(window.location.href);
                  setCopySuccess(true);
                  setTimeout(() => setCopySuccess(false), 2000);
                }}
                variant="ghost"
                size="sm" className="text-slate-50 px-3 text-xs font-medium inline-flex items-center justify-center gap-2 whitespace-nowrap ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 hover:bg-accent hover:text-accent-foreground h-9 rounded-md">


                {copySuccess ? 'Copied!' : 'Copy Link'}
              </Button>
            </div>
        </CardContent>
      </Card>
    </motion.div>);

}
